find_package(cpp_cuda)
if(cpp_cuda_FOUND)
    set(backend_deps cpp_cuda::cpp_cuda)
    add_definitions(-DGPU_BACKEND_ENABLE=1)
endif()
find_package(mekil REQUIRED)
if(mekil_FOUND)
    set(backend_deps ${backend_deps} mekil::mekil)
    add_definitions(-DCPU_BACKEND_ENABLE=1)
endif()

find_package(PkgConfig REQUIRED)
# set(ENV{PKG_CONFIG_PATH} "/usr/lib/pkgconfig;/usr/local/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
pkg_check_modules(RCWASOLVER REQUIRED rcwasolver)
if (RCWASOLVER_FOUND)
    message(STATUS "rcwasolver libraries found.")
    message(STATUS "RCWASOLVER_INCLUDE_DIRS: ${RCWASOLVER_INCLUDE_DIRS}")
    message(STATUS "RCWASOLVER_LIBRARY_DIRS: ${RCWASOLVER_LIBRARY_DIRS}")
    message(STATUS "RCWASOLVER_LIBRARIES: ${RCWASOLVER_LIBRARIES}")
    include_directories(${RCWASOLVER_INCLUDE_DIRS})
else()
    message(FATAL_ERROR "rcwasolver requested, but not found, and installation failed")
endif()


file(GLOB tests ${CMAKE_CURRENT_LIST_DIR}/test_*.cpp)
foreach(test IN LISTS tests)
    get_filename_component(test_WLE ${test} NAME_WLE)
    add_executable(${test_WLE} ${test})
    target_link_libraries(${test_WLE} PUBLIC py_visualizer::py_visualizer ${backend_deps} ${RCWASOLVER_LIBRARIES})
    # target_include_directories(${test_WLE} PUBLIC "/mnt/c/Users/like/source/repos/infrastructure/fft/include/")

    set_target_properties(${test_WLE} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}) 
    copy_visualizer_files(${test_WLE} ${CMAKE_BINARY_DIR})

    set(test_WLE _${test_WLE})
    add_library(${test_WLE} SHARED ${test})
    target_link_libraries(${test_WLE} PUBLIC py_visualizer::py_visualizer  ${backend_deps} ${RCWASOLVER_LIBRARIES})
    # target_include_directories(${test_WLE} PUBLIC "/mnt/c/Users/like/source/repos/infrastructure/fft/include/")
    set_target_properties(${test_WLE} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}) 
endforeach()
